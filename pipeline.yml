trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  GitVersion.Version: '5.x.x'
  GitVersion.Config: 'gitversion.yml'
  NuGet.Version: '6.x.x'
  Build.Projects: '**/*.csproj'
  Build.Projects.Library: 'EtherGizmos.Extensions.DependencyInjection.ChildContainers'
  Build.Configuration: 'Release'

jobs:
- job: prepare
  displayName: 'Pre-Build Tasks'
  steps:
  - checkout: self
    fetchDepth: 0
    clean: true

  - task: gitversion/setup@0
    displayName: 'Install GitVersion'
    inputs:
      versionSpec: '$(GitVersion.Version)'

  - task: gitversion/execute@0
    displayName: 'Run GitVersion'
    inputs:
      useConfigFile: true
      configFilePath: '$(GitVersion.Config)'

- job: build
  dependsOn: prepare
  displayName: 'Build Tasks'
  variables:
    CheckDependencies: $[ convertToJson( dependencies ) ]
  steps:

  - task: PowerShell@2
    displayName: 'Debug Dependencies'
    inputs:
      targetType: 'inline'
      script: 'Write-Host $env:CHECK_DEPENDENCIES'
    env:
      CHECK_DEPENDENCIES: $(CheckDependencies)

  - task: DotNetCoreCLI@2
    displayName: 'Perform Tests'
    inputs:
      command: 'test'
      projects: '**/*.*Tests.csproj'
      arguments: '--collect "XPlat Code Coverage"'

  - task: reportgenerator@5
    displayName: 'Combine Code Coverage'
    inputs:
      reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      targetdir: '$(Build.SourcesDirectory)/CoverageResults'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CoverageResults'
    env:
      DISABLE_COVERAGE_AUTOGENERATE: 'true'

- job: publish
  #condition: and( succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main') )
  dependsOn:
    - prepare
    - build
  displayName: 'Publish Tasks'
  variables:
    CheckDependencies: $[ convertToJson( dependencies ) ]
    BuildVersion: $[ dependencies.prepare.outputs['gitversionexecute.GitVersion.SemVer'] ]
  steps:

  - task: PowerShell@2
    displayName: 'Debug Dependencies'
    inputs:
      targetType: 'inline'
      script: 'Write-Host $env:CHECK_DEPENDENCIES'
    env:
      CHECK_DEPENDENCIES: $(CheckDependencies)

  - task: DotNetCoreCLI@2
    displayName: 'Package Library'
    inputs:
      command: 'pack'
      packagesToPack: '**/$(Build.Projects.Library).csproj'
      configuration: '$(Build.Configuration)'
      includesymbols: true
      includesource: true
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'BUILD_VERSION'
    env:
      BUILD_VERSION: $(BuildVersion)

#  - task: NuGetCommand@2
#    displayName: 'Publish Library'
#    inputs:
#      command: 'push'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#      nuGetFeedType: 'external'
#      publishFeedCredentials: 'NuGet'

  - task: PowerShell@2
    displayName: 'Create docs Directory'
    inputs:
      targetType: 'inline'
      script: 'New-Item -ItemType Directory -Force -Path $(Build.ArtifactStagingDirectory)/docs'

  - task: XplatGenerateReleaseNotes@4
    displayName: 'Generate Release Notes'
    inputs:
      outputfile: '$(Build.ArtifactStagingDirectory)/docs/RELEASENOTES.md'
      templateLocation: 'InLine'
      inlinetemplate: |
        ## Build {{buildDetails.buildNumber}}
        * **Branch**: {{buildDetails.sourceBranch}}
        * **Tags**: {{buildDetails.tags}}
        * **Completed**: {{buildDetails.finishTime}}
        * **Previous Build**: {{compareBuildDetails.buildNumber}}
        
        ## Associated Pull Requests ({{pullRequests.length}})
        {{#forEach pullRequests}}
        * **[{{this.pullRequestId}}]({{replace (replace this.url "_apis/git/repositories" "_git") "pullRequests" "pullRequest"}})** {{this.title}}
        * Associated Work Items
        {{#forEach this.associatedWorkitems}}
           {{#with (lookup_a_work_item ../../relatedWorkItems this.url)}}
            - [{{this.id}}]({{replace this.url "_apis/wit/workItems" "_workitems/edit"}}) - {{lookup this.fields 'System.Title'}}
           {{/with}}
        {{/forEach}}
        * Associated Commits (this includes commits on the PR source branch not associated directly with the build)
        {{#forEach this.associatedCommits}}
            - [{{this.commitId}}]({{this.remoteUrl}}) -  {{this.comment}}
        {{/forEach}}
        {{/forEach}}
        
        # Global list of WI with PRs, parents and children
        {{#forEach this.workItems}}
        {{#if isFirst}}### WorkItems {{/if}}
        *  **{{this.id}}**  {{lookup this.fields 'System.Title'}}
           - **WIT** {{lookup this.fields 'System.WorkItemType'}}
           - **Tags** {{lookup this.fields 'System.Tags'}}
           - **Assigned** {{#with (lookup this.fields 'System.AssignedTo')}} {{displayName}} {{/with}}
           - **Description** {{{lookup this.fields 'System.Description'}}}
           - **PRs**
        {{#forEach this.relations}}
        {{#if (contains this.attributes.name 'Pull Request')}}
        {{#with (lookup_a_pullrequest ../../pullRequests  this.url)}}
              - {{this.pullRequestId}} - {{this.title}}
        {{/with}}
        {{/if}}
        {{/forEach}}
           - **Parents**
        {{#forEach this.relations}}
        {{#if (contains this.attributes.name 'Parent')}}
        {{#with (lookup_a_work_item ../../relatedWorkItems  this.url)}}
              - {{this.id}} - {{lookup this.fields 'System.Title'}}
              {{#forEach this.relations}}
              {{#if (contains this.attributes.name 'Parent')}}
              {{#with (lookup_a_work_item ../../../../relatedWorkItems  this.url)}}
                 - {{this.id}} - {{lookup this.fields 'System.Title'}}
              {{/with}}
              {{/if}}
              {{/forEach}}
        {{/with}}
        {{/if}}
        {{/forEach}}
           - **Children**
        {{#forEach this.relations}}
        {{#if (contains this.attributes.name 'Child')}}
        {{#with (lookup_a_work_item ../../relatedWorkItems  this.url)}}
              - {{this.id}} - {{lookup this.fields 'System.Title'}}
        {{/with}}
        {{/if}}
        {{/forEach}}
           - **Tested By**
        {{#forEach this.relations}}
        {{#if (contains this.attributes.name 'Tested By')}}
        {{#with (lookup_a_work_item ../../testedByWorkItems  this.url)}}
              - {{this.id}} - {{lookup this.fields 'System.Title'}}
        {{/with}}
        {{/if}}
        {{/forEach}}
        {{/forEach}}
        
        # Global list of CS ({{commits.length}})
        {{#forEach commits}}
        {{#if isFirst}}### Associated commits{{/if}}
        * ** ID{{this.id}}**
           -  **Message:** {{this.message}}
           -  **Commited by:** {{this.author.displayName}}
           -  **FileCount:** {{this.changes.length}}
        {{#forEach this.changes}}
              -  **File path (TFVC or TfsGit):** {{this.item.path}}
              -  **File filename (GitHub):** {{this.filename}}
        {{/forEach}}
        {{/forEach}}
        
        ## List of WI returned by WIQL ({{queryWorkItems.length}})
        {{#forEach queryWorkItems}}
        *  **{{this.id}}** {{lookup this.fields 'System.Title'}}
        {{/forEach}}
        
        ## Manual Test Plans
        | Run ID | Name | State | Total Tests | Passed Tests |
        | --- | --- | --- | --- | --- |
        {{#forEach manualTests}}
        | [{{this.id}}]({{this.webAccessUrl}}) | {{this.name}} | {{this.state}} | {{this.totalTests}} | {{this.passedTests}} |
        {{/forEach}}
        
        ## Global list of ConsumedArtifacts ({{consumedArtifacts.length}})
        | Category | Type | Version Name | Version Id | Commits | Workitems |
        |-|-|-|-|-|-|
        {{#forEach consumedArtifacts}}
         |{{this.artifactCategory}} | {{this.artifactType}} | {{#if versionName}}{{versionName}}{{/if}} | {{truncate versionId 7}} | {{#if this.commits}} {{this.commits.length}} {{/if}} | {{#if this.workitems}} {{this.workitems.length}} {{/if}} |
        {{/forEach}}
        
        ## Artifacts published by build ({{publishedArtifacts.length}})
        | Name| Type |
        |-|-|-|
        {{#forEach publishedArtifacts}}
         |{{this.name}} | {{this.resource.type}} | 
        {{/forEach}}
      dumpPayloadToConsole: false
      dumpPayloadToFile: false
      replaceFile: true
      getParentsAndChildren: false
      getAllParents: false
      getIndirectPullRequests: false
      stopOnError: false
      considerPartiallySuccessfulReleases: false
      checkForManuallyLinkedWI: false
      wiqlFromTarget: 'WorkItems'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Documentation'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/docs'
      ArtifactName: 'docs'
      publishLocation: 'Container'
